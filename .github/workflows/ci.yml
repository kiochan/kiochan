name: CI

on:
  push:
    branches:
      - '**'

permissions:
  actions: read
  contents: read

env:
  NODE_VERSION: 20

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Fetch dev branch
        run: git fetch origin dev:refs/remotes/origin/dev

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Install dependencies
        run: npm ci
        if: steps.cache-node-modules.outputs.cache-hit != 'true'

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Fetch dev branch
        run: git fetch origin dev:refs/remotes/origin/dev

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Install dependencies
        run: npm ci
        if: steps.cache-node-modules.outputs.cache-hit != 'true'

      - name: Run lint
        run: npx nx affected --verbose --base=origin/dev --target=lint

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Fetch dev branch
        run: git fetch origin dev:refs/remotes/origin/dev

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Cache next build outputs
        id: cache-next-build
        uses: actions/cache@v3
        with:
          path: '**/.next'
          key: ${{ runner.os }}-next_dist-${{ hashFiles('**/package-lock.json', '**/app/**/src/**/*.ts', '**/lib/**/src/**/*.ts') }}
          restore-keys: |
            ${{ runner.os }}-next_dist-

      - name: Install dependencies
        run: npm ci
        if: steps.cache-node-modules.outputs.cache-hit != 'true'

      - name: Run build
        run: npx nx affected --verbose --base=origin/dev --target=build
        if: steps.cache-next-build.outputs.cache-hit != 'true'

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Fetch dev branch
        run: git fetch origin dev:refs/remotes/origin/dev

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Install dependencies
        run: npm ci
        if: steps.cache-node-modules.outputs.cache-hit != 'true'

      - name: Run tests
        run: npx nx affected --verbose --base=origin/dev --target=test

  e2e:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.45.1-jammy
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Mark working directory as safe
        run: git config --global --add safe.directory /__w/${{ github.repository }}

      - name: Set ownership
        run: chown -R $(id -u):$(id -g) $PWD

      - name: Fetch dev branch
        run: git fetch origin dev:refs/remotes/origin/dev

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Restore next build cache
        id: cache-next-build
        uses: actions/cache@v3
        with:
          path: '**/.next'
          key: ${{ runner.os }}-next_dist-${{ hashFiles('**/package-lock.json', '**/app/**/src/**/*.ts', '**/lib/**/src/**/*.ts') }}
          restore-keys: |
            ${{ runner.os }}-next_dist-

      - name: Install dependencies
        run: npm ci
        if: steps.cache-node-modules.outputs.cache-hit != 'true'

      - name: Run build
        run: npx nx affected --verbose --base=origin/dev --target=build
        if: steps.cache-next-build.outputs.cache-hit != 'true'

      - name: Set HOME environment variable
        run: echo "HOME=/root" >> $GITHUB_ENV

      - name: Run e2e tests
        run: npx nx affected --verbose --base=origin/dev --target=e2e
