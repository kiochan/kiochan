name: CI

on:
  push:
    branches:
      - '**'

permissions:
  actions: read
  contents: read

env:
  NODE_VERSION: 20
  PORT_APP_WEB: '${{ vars.PORT_APP_WEB }}'
  PM2_JOB_NAME_APP_WEB: '${{ vars.PM2_JOB_NAME_APP_WEB }}'
  SERVER_DIR: '${{ secrets.SERVER_DIR }}'
  SERVER_HOST: '${{ secrets.SERVER_HOST }}'
  SERVER_PASSWORD: '${{ secrets.SERVER_PASSWORD }}'
  SERVER_USER: '${{ secrets.SERVER_USER }}'
  REPO_NAME: '${{ github.repository }}'

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-

      - name: Cache Nx build cache
        uses: actions/cache@v3
        with:
          path: .nx/cache
          key: ${{ runner.os }}-nx-build-${{ hashFiles('**/project.json', '**/workspace.json', '**/nx.json') }}

      - name: Install dependencies
        run: npm ci

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npx nx affected --verbose --base=origin/dev --target=lint

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run build
        run: npx nx affected --verbose --base=origin/dev --target=build

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npx nx affected --verbose --base=origin/dev --target=test

  e2e:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.47.2-jammy
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Mark working directory as safe
        run: git config --global --add safe.directory /__w/${{ github.repository }}

      - name: Set ownership
        run: chown -R $(id -u):$(id -g) $PWD

      - name: Fetch dev branch
        run: git fetch origin dev:refs/remotes/origin/dev

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run e2e tests
        env:
          HOME: /root
        run: npx nx affected --verbose --base=origin/dev --target=e2e

  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/prod' }}
    needs: [build, test, e2e]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Stop service
        run: |
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} <<EOF
            pm2 delete "${{ vars.PM2_JOB_NAME_APP_WEB }}" || true
          EOF

      - name: Sync files
        run: |
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} <<EOF
            if [ ! -d "${{ secrets.SERVER_DIR }}" ]; then
              git clone git@github.com:${{ github.repository }}.git ${{ secrets.SERVER_DIR }}
            else
              cd ${{ secrets.SERVER_DIR }}
                git fetch origin prod
                if ! git reset --hard origin/prod; then
                  cd ..
                    rm -rf ${{ secrets.SERVER_DIR }}
                    git clone git@github.com:${{ github.repository }}.git ${{ secrets.SERVER_DIR }}
                fi
            fi
          EOF

      - name: Build
        run: |
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} <<EOF
            cd ${{ secrets.SERVER_DIR }}
              npm ci
              npx nx build app-web
              if [ $? -ne 0 ]; then
                echo "NX build failed"
                echo "Reset nx workspace"
                npm ci
                nx reset
                npx nx build app-web
                if [ $? -ne 0 ]; then
                  echo "NX build failed and unable to be fixed automatically"
                  exit 1
                fi
              fi
          EOF

      - name: Start service
        run: |
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} <<EOF
            cd ${{ secrets.SERVER_DIR }}
            pm2 start "npx nx start app-web -p ${{ vars.PORT_APP_WEB }}" --name "${{ vars.PM2_JOB_NAME_APP_WEB }}" --update-env
            pm2 save
            echo "PM2 updated successfully"
          EOF

      - name: Check PM2 service status
        run: |
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} <<EOF
            systemctl is-active --quiet pm2-${{ secrets.SERVER_USER }}.service
            if [ $? -ne 0 ]; then
              echo "PM2 service is not running"
              exit 1
            fi
            echo "PM2 service is running"
          EOF
